// This is automatically generated by PolySA
// Array type: ASYNC

#include "Halide.h"
#include <iostream>

using namespace Halide;
using namespace std;

int main(void) {
// Input declarations
ImageParam B(type_of<float>(), 2, "B");
ImageParam A(type_of<float>(), 2, "A");
ImageParam C_ext(type_of<float>(), 3, "C_ext");
ImageParam C(type_of<float>(), 2, "C");

// Input initialization

// Variable declarations
Var t1, t2, t3;

// Function declarations
#define FUNC_S type_of<float>(), {t1, t2, t3}, Place::Host
Func B_CC0_E(FUNC_S), A_CC1_E(FUNC_S), C_CC3_E(FUNC_S), C_ext_CC2_I(FUNC_S), APP(FUNC_S);

// UREs
B_CC0_E(t1, t2, t3) = select((t3 == 0 && t1 == 0 && t2 >= 0 && -t2 + (63) >= 0) || (t1 == 0 && t2 >= 0 && -t2 + (63) >= 0 && t3 + -1 >= 0 && -t3 + (63) >= 0), B(t3, t2), B_CC0_E(t1 + (-1), t2, t3));
A_CC1_E(t1, t2, t3) = select((t3 == 0 && t2 == 0 && t1 >= 0 && -t1 + (63) >= 0) || (t2 == 0 && t1 >= 0 && -t1 + (63) >= 0 && t3 + -1 >= 0 && -t3 + (63) >= 0), A(t1, t3), A_CC1_E(t1, t2 + (-1), t3));

// Build the initial loop nest
Var tloop1;
APP.merge_defs(B_CC0_E, A_CC1_E)
   .reorder_inward(t1, t2, t3)
   .space_time_transform({t1, t2, t3},
                         {tloop1},
                         {t1, t2},
                         {1, 0, 0,
                          0, 1, 0,
                          0, 0, 1},
                         {1, 0, 0,
                          0, 1, 0,
                          0, 0, 1},)
   .domain(t1, 0 + 1, 63 + 1, 1,
           t2, 0 + 1, 63 + 1, 1,
           t3, 0 + 1, 63 + 1, 1,
           tloop1, 0 + 1, 63 + 1, 1,
);

// PE Optimization

// CPU Realization
Image<float> CPU_output(63 + 2, 63 + 2, 63 + 2);
APP.realize(CPU_output);
cout << "END" << endl;

// CPU Verification

/*
// Build I/O network
Func B_CC0_E_serializer(Place::Host), B_CC0_E_loader, B_CC0_E_feeder, A_CC1_E_serializer(Place::Host), A_CC1_E_loader, A_CC1_E_feeder, C_ext_CC2_I_drainer, C_ext_CC2_I_collector, C_ext_CC2_I_unloader, C_ext_CC2_I_deserializer(Place::Host), C_CC3_E_drainer, C_CC3_E_collector, C_CC3_E_unloader, C_CC3_E_deserializer(Place::Host);
APP.isolate_consumer_chain(B_CC0_E, B_CC0_E_feeder, B_CC0_E_loader, B_CC0_E_serializer)
   .isolate_consumer_chain(A_CC1_E, A_CC1_E_feeder, A_CC1_E_loader, A_CC1_E_serializer)
   .isolate_producer_chain(C_ext_CC2_I, C_ext_CC2_I_drainer, C_ext_CC2_I_collector, C_ext_CC2_I_unloader C_ext_CC2_I_deserializer)
   .isolate_producer_chain(C_CC3_E, C_CC3_E_drainer, C_CC3_E_collector, C_CC3_E_unloader C_CC3_E_deserializer);

// I/O Optimization

*/
}
