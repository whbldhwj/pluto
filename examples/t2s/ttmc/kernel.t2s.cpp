// This is automatically generated by PolySA
// Array type: SYNC

#include "Halide.h"
#include <iostream>

using namespace Halide;
using namespace std;

int main(void) {
// Input declarations
ImageParam D(type_of<int>(), 3, "D");
ImageParam A(type_of<int>(), 3, "A");
ImageParam C(type_of<int>(), 2, "C");
ImageParam B(type_of<int>(), 2, "B");

// Input initialization

// Variable declarations
Var t1, t2, t3, t4, t5;

// Function declarations
#define FUNC_S type_of<int>(), {t1, t2, t3, t4, t5}, Place::Host
Func A_CC1_E(FUNC_S), C_CC2_E(FUNC_S), B_CC3_E(FUNC_S), D_CC0_I(FUNC_S), APP(FUNC_S);

// UREs
A_CC1_E(t1, t2, t3, t4, t5) = 0;
A_CC1_E(t1, t2, t3, t4, t5) = select((t4 - 1 == 0 && t5 - 1 >= 0), A((7 * t1) / 7, (7 * t5) / 7, (7 * t3 - 49 * t5) / 7), select((t4 - 2 >= 0 && t5 - 1 >= 0), A_CC1_E(t1, t2, t3, t4 - 1, t5), A_CC1_E(t1, t2, t3, t4, t5)));
C_CC2_E(t1, t2, t3, t4, t5) = 0;
C_CC2_E(t1, t2, t3, t4, t5) = select((t4 - 1 == 0 && t5 - 1 >= 0), C((7 * t3 - 49 * t5) / 7, (7 * t2) / 7), select((t4 - 2 >= 0 && t5 - 1 >= 0), C_CC2_E(t1, t2, t3, t4 - 1, t5), C_CC2_E(t1, t2, t3, t4, t5)));
B_CC3_E(t1, t2, t3, t4, t5) = 0;
B_CC3_E(t1, t2, t3, t4, t5) = select((t2 - 1 == 0 && t5 - 1 >= 0), B((7 * t5) / 7, (7 * t4) / 7), select((t2 - 2 >= 0 && t5 - 1 >= 0), B_CC3_E(t1, t2 - 1, t3, t4, t5), B_CC3_E(t1, t2, t3, t4, t5)));
D_CC0_I(t1, t2, t3, t4, t5) = 0;
D_CC0_I(t1, t2, t3, t4, t5) = select((t5 == 0 && t3 - 7 == 0), 0, D_CC0_I(t1, t2, t3, t4, t5));
D_CC0_I(t1, t2, t3, t4, t5) = select((t5 - 1 >= 0 && t3 - 7 * t5 - 2 >= 0), (D_CC0_I(t1, t2, t3 - 1, t4, t5) + ((A_CC1_E(t1, t2, t3, t4, t5) * B_CC3_E(t1, t2, t3, t4, t5)) * C_CC2_E(t1, t2, t3, t4, t5))), D_CC0_I(t1, t2, t3, t4, t5));
D_CC0_I(t1, t2, t3, t4, t5) = select((-t3 + 7 * t5 + 1 == 0 && t3 - 15 >= 0), (D_CC0_I(t1, t2, t3, t4, t5 - 1) + ((A_CC1_E(t1, t2, t3, t4, t5) * B_CC3_E(t1, t2, t3, t4, t5)) * C_CC2_E(t1, t2, t3, t4, t5))), D_CC0_I(t1, t2, t3, t4, t5));
D_CC0_I(t1, t2, t3, t4, t5) = select((t5 - 1 == 0 && t3 - 8 == 0), (D_CC0_I(t1, t2, t3 - 1, t4, t5 - 1) + ((A_CC1_E(t1, t2, t3, t4, t5) * B_CC3_E(t1, t2, t3, t4, t5)) * C_CC2_E(t1, t2, t3, t4, t5))), D_CC0_I(t1, t2, t3, t4, t5));
APP(t1, t2, t3, t4, t5) = 0;
APP(t1, t2, t3, t4, t5) = select((t5 - 8 == 0 && t3 - 64 == 0), D_CC0_I(t1, t2, t3, t4, t5), APP(t1, t2, t3, t4, t5));

// Build the initial loop nest
Var tloop1, tloop2, tloop3;
APP.merge_defs({A_CC1_E.update(0), C_CC2_E.update(0), B_CC3_E.update(0), D_CC0_I.update(0), D_CC0_I.update(1), D_CC0_I.update(2), D_CC0_I.update(3), APP.update(0)}, {A_CC1_E, C_CC2_E, B_CC3_E, D_CC0_I})
   .reorder_inward(t1, t2, t3, t4, t5)
   .space_time_transform({t1, t2, t3, t4, t5},
                         {tloop1, tloop2, tloop3},
                         {t4, t5},
                         {1, 0, 0, 0, 0,
                          0, 1, 0, 0, 0,
                          0, 0, 1, 0, 0,
                          0, 0, 0, 1, 0,
                          0, 0, 0, 0, 1},
                         {1, 0, 0, 0, 0,
                          0, 1, 0, 0, 0,
                          0, 0, 1, 0, 0,
                          0, 0, 0, 1, 0,
                          0, 0, 0, 0, 1})
   .domain(t1, 1, 8, 1,
           t2, 1, 8, 1,
           t3, 7, 64, 1,
           t4, 1, 8, 1,
           t5, 0, 8, 1,
           tloop1, 1, 8, 1,
           tloop2, 1, 8, 1,
           tloop3, 7, 64, 1);

// PE Optimization

// CPU Realization
Image<int> FPGA_output(8 + 1, 8 + 1, 64 + 1, 8 + 1, 8 + 1);
APP.realize(FPGA_output);
cout << "END" << endl;

// CPU Verification

/*
// Build I/O network
Func D_CC0_I_drainer, D_CC0_I_collector, D_CC0_I_unloader, D_CC0_I_deserializer(Place::Host), A_CC1_E_serializer(Place::Host), A_CC1_E_loader, A_CC1_E_feeder, C_CC2_E_serializer(Place::Host), C_CC2_E_loader, C_CC2_E_feeder, B_CC3_E_serializer(Place::Host), B_CC3_E_loader, B_CC3_E_feeder;
APP.isolate_producer_chain(D_CC0_I, D_CC0_I_drainer, D_CC0_I_collector, D_CC0_I_unloader D_CC0_I_deserializer(Place::Host))
   .isolate_consumer_chain(A_CC1_E, A_CC1_E_feeder, A_CC1_E_loader, A_CC1_E_serializer(Place::Host))
   .isolate_consumer_chain(C_CC2_E, C_CC2_E_feeder, C_CC2_E_loader, C_CC2_E_serializer(Place::Host))
   .isolate_consumer_chain(B_CC3_E, B_CC3_E_feeder, B_CC3_E_loader, B_CC3_E_serializer(Place::Host));

// I/O Optimization

*/
}
