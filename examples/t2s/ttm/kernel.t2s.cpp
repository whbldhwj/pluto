// This is automatically generated by PolySA
// Array type: SYNC

#include "Halide.h"
#include <iostream>

using namespace Halide;
using namespace std;

int main(void) {
// Input declarations
ImageParam C(type_of<int>(), 3, "C");
ImageParam B(type_of<int>(), 2, "B");
ImageParam A(type_of<int>(), 3, "A");

// Input initialization

// Variable declarations
Var t1, t2, t3, t4;

// Function declarations
#define FUNC_S type_of<int>(), {t1, t2, t3, t4}, Place::Host
Func B_CC1_E(FUNC_S), A_CC2_E(FUNC_S), C_CC0_I(FUNC_S), APP(FUNC_S);

// UREs
B_CC1_E(t1, t2, t3, t4) = 0;
B_CC1_E(t1, t2, t3, t4) = select((t3 - 1 == 0), B(t2, t4), select((t3 - 2 >= 0), B_CC1_E(t1, t2, t3 - 1, t4), B_CC1_E(t1, t2, t3, t4)));
A_CC2_E(t1, t2, t3, t4) = 0;
A_CC2_E(t1, t2, t3, t4) = select((t4 - 1 == 0), A(t1, t3, t2), select((t4 - 2 >= 0), A_CC2_E(t1, t2, t3, t4 - 1), A_CC2_E(t1, t2, t3, t4)));
C_CC0_I(t1, t2, t3, t4) = 0;
C_CC0_I(t1, t2, t3, t4) = select((t2 - 1 == 0), 0, C_CC0_I(t1, t2, t3, t4));
C_CC0_I(t1, t2, t3, t4) = select((t2 - 1 == 0), (C_CC0_I(t1, t2, t3, t4) + (A_CC2_E(t1, t2, t3, t4) * B_CC1_E(t1, t2, t3, t4))), C_CC0_I(t1, t2, t3, t4));
C_CC0_I(t1, t2, t3, t4) = select((t2 - 2 >= 0), (C_CC0_I(t1, t2 - 1, t3, t4) + (A_CC2_E(t1, t2, t3, t4) * B_CC1_E(t1, t2, t3, t4))), C_CC0_I(t1, t2, t3, t4));
APP(t1, t2, t3, t4) = 0;
APP(t1, t2, t3, t4) = select((t2 - 8 == 0), C_CC0_I(t1, t2, t3, t4), APP(t1, t2, t3, t4));

// Build the initial loop nest
Var tloop1, tloop2;
APP.merge_defs({B_CC1_E.update(0), A_CC2_E.update(0), C_CC0_I.update(0), C_CC0_I.update(1), C_CC0_I.update(2), APP.update(0)}, {B_CC1_E, A_CC2_E, C_CC0_I})
   .reorder_inward(t1, t2, t3, t4)
   .space_time_transform({t1, t2, t3, t4},
                         {tloop1, tloop2},
                         {t3, t4},
                         {1, 0, 0, 0,
                          0, 1, 0, 0,
                          0, 0, 1, 0,
                          0, 0, 0, 1},
                         {1, 0, 0, 0,
                          0, 1, 0, 0,
                          0, 0, 1, 0,
                          0, 0, 0, 1})
   .domain(t1, 1, 8, 1,
           t2, 1, 8, 1,
           t3, 1, 8, 1,
           t4, 1, 8, 1,
           tloop1, 1, 8, 1,
           tloop2, 1, 8, 1);

// PE Optimization

// CPU Realization
Image<int> FPGA_output(8 + 1, 8 + 1, 8 + 1, 8 + 1);
APP.realize(FPGA_output);
cout << "END" << endl;

// CPU Verification

/*
// Build I/O network
Func C_CC0_I_drainer, C_CC0_I_collector, C_CC0_I_unloader, C_CC0_I_deserializer(Place::Host), B_CC1_E_serializer(Place::Host), B_CC1_E_loader, B_CC1_E_feeder, A_CC2_E_serializer(Place::Host), A_CC2_E_loader, A_CC2_E_feeder;
APP.isolate_producer_chain(C_CC0_I, C_CC0_I_drainer, C_CC0_I_collector, C_CC0_I_unloader C_CC0_I_deserializer(Place::Host))
   .isolate_consumer_chain(B_CC1_E, B_CC1_E_feeder, B_CC1_E_loader, B_CC1_E_serializer(Place::Host))
   .isolate_consumer_chain(A_CC2_E, A_CC2_E_feeder, A_CC2_E_loader, A_CC2_E_serializer(Place::Host));

// I/O Optimization

*/
}
